import React from 'react';
import PropTypes from 'prop-types';
import { getPropsWithLayout, propTypes, LayoutContext, default as Layout } from './Layout';
declare const componentPropTypes: {
    m: PropTypes.Requireable<NonNullable<string | number>>;
    mb: PropTypes.Requireable<NonNullable<string | number>>;
    mt: PropTypes.Requireable<NonNullable<string | number>>;
    mr: PropTypes.Requireable<NonNullable<string | number>>;
    ml: PropTypes.Requireable<NonNullable<string | number>>;
    mx: PropTypes.Requireable<NonNullable<string | number>>;
    my: PropTypes.Requireable<NonNullable<string | number>>;
    p: PropTypes.Requireable<NonNullable<string | number>>;
    pb: PropTypes.Requireable<NonNullable<string | number>>;
    pt: PropTypes.Requireable<NonNullable<string | number>>;
    pr: PropTypes.Requireable<NonNullable<string | number>>;
    pl: PropTypes.Requireable<NonNullable<string | number>>;
    px: PropTypes.Requireable<NonNullable<string | number>>;
    py: PropTypes.Requireable<NonNullable<string | number>>;
    h: PropTypes.Requireable<NonNullable<string | number>>;
    w: PropTypes.Requireable<NonNullable<string | number>>;
    flex: PropTypes.Requireable<boolean>;
    inline: PropTypes.Requireable<boolean>;
    wrap: PropTypes.Requireable<boolean>;
    reverse: PropTypes.Requireable<boolean>;
    column: PropTypes.Requireable<boolean>;
    align: PropTypes.Requireable<string>;
    alignContent: PropTypes.Requireable<string>;
    alignSelf: PropTypes.Requireable<string>;
    justify: PropTypes.Requireable<string>;
    order: PropTypes.Requireable<number>;
    shrink: PropTypes.Requireable<NonNullable<number | boolean>>;
    grow: PropTypes.Requireable<NonNullable<number | boolean>>;
    basis: PropTypes.Requireable<number>;
    auto: PropTypes.Requireable<boolean>;
    hcenter: PropTypes.Requireable<boolean>;
    vcenter: PropTypes.Requireable<boolean>;
    center: PropTypes.Requireable<boolean>;
    as: PropTypes.Requireable<string>;
};
export type ComponentProps = PropTypes.InferProps<typeof componentPropTypes> & React.AllHTMLAttributes<HTMLDivElement>;
declare const Box: {
    ({ as, children, ...rest }: ComponentProps): React.DOMElement<never, Element>;
    displayName: string;
    propTypes: {
        m: PropTypes.Requireable<NonNullable<string | number>>;
        mb: PropTypes.Requireable<NonNullable<string | number>>;
        mt: PropTypes.Requireable<NonNullable<string | number>>;
        mr: PropTypes.Requireable<NonNullable<string | number>>;
        ml: PropTypes.Requireable<NonNullable<string | number>>;
        mx: PropTypes.Requireable<NonNullable<string | number>>;
        my: PropTypes.Requireable<NonNullable<string | number>>;
        p: PropTypes.Requireable<NonNullable<string | number>>;
        pb: PropTypes.Requireable<NonNullable<string | number>>;
        pt: PropTypes.Requireable<NonNullable<string | number>>;
        pr: PropTypes.Requireable<NonNullable<string | number>>;
        pl: PropTypes.Requireable<NonNullable<string | number>>;
        px: PropTypes.Requireable<NonNullable<string | number>>;
        py: PropTypes.Requireable<NonNullable<string | number>>;
        h: PropTypes.Requireable<NonNullable<string | number>>;
        w: PropTypes.Requireable<NonNullable<string | number>>;
        flex: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        wrap: PropTypes.Requireable<boolean>;
        reverse: PropTypes.Requireable<boolean>;
        column: PropTypes.Requireable<boolean>;
        align: PropTypes.Requireable<string>;
        alignContent: PropTypes.Requireable<string>;
        alignSelf: PropTypes.Requireable<string>;
        justify: PropTypes.Requireable<string>;
        order: PropTypes.Requireable<number>;
        shrink: PropTypes.Requireable<NonNullable<number | boolean>>;
        grow: PropTypes.Requireable<NonNullable<number | boolean>>;
        basis: PropTypes.Requireable<number>;
        auto: PropTypes.Requireable<boolean>;
        hcenter: PropTypes.Requireable<boolean>;
        vcenter: PropTypes.Requireable<boolean>;
        center: PropTypes.Requireable<boolean>;
        as: PropTypes.Requireable<string>;
    };
};
declare const Flex: {
    ({ as, children, ...rest }: ComponentProps): React.DOMElement<never, Element>;
    displayName: string;
    propTypes: {
        m: PropTypes.Requireable<NonNullable<string | number>>;
        mb: PropTypes.Requireable<NonNullable<string | number>>;
        mt: PropTypes.Requireable<NonNullable<string | number>>;
        mr: PropTypes.Requireable<NonNullable<string | number>>;
        ml: PropTypes.Requireable<NonNullable<string | number>>;
        mx: PropTypes.Requireable<NonNullable<string | number>>;
        my: PropTypes.Requireable<NonNullable<string | number>>;
        p: PropTypes.Requireable<NonNullable<string | number>>;
        pb: PropTypes.Requireable<NonNullable<string | number>>;
        pt: PropTypes.Requireable<NonNullable<string | number>>;
        pr: PropTypes.Requireable<NonNullable<string | number>>;
        pl: PropTypes.Requireable<NonNullable<string | number>>;
        px: PropTypes.Requireable<NonNullable<string | number>>;
        py: PropTypes.Requireable<NonNullable<string | number>>;
        h: PropTypes.Requireable<NonNullable<string | number>>;
        w: PropTypes.Requireable<NonNullable<string | number>>;
        flex: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        wrap: PropTypes.Requireable<boolean>;
        reverse: PropTypes.Requireable<boolean>;
        column: PropTypes.Requireable<boolean>;
        align: PropTypes.Requireable<string>;
        alignContent: PropTypes.Requireable<string>;
        alignSelf: PropTypes.Requireable<string>;
        justify: PropTypes.Requireable<string>;
        order: PropTypes.Requireable<number>;
        shrink: PropTypes.Requireable<NonNullable<number | boolean>>;
        grow: PropTypes.Requireable<NonNullable<number | boolean>>;
        basis: PropTypes.Requireable<number>;
        auto: PropTypes.Requireable<boolean>;
        hcenter: PropTypes.Requireable<boolean>;
        vcenter: PropTypes.Requireable<boolean>;
        center: PropTypes.Requireable<boolean>;
        as: PropTypes.Requireable<string>;
    };
};
declare const HBox: {
    ({ as, children, ...rest }: ComponentProps): React.DOMElement<never, Element>;
    displayName: string;
    propTypes: {
        m: PropTypes.Requireable<NonNullable<string | number>>;
        mb: PropTypes.Requireable<NonNullable<string | number>>;
        mt: PropTypes.Requireable<NonNullable<string | number>>;
        mr: PropTypes.Requireable<NonNullable<string | number>>;
        ml: PropTypes.Requireable<NonNullable<string | number>>;
        mx: PropTypes.Requireable<NonNullable<string | number>>;
        my: PropTypes.Requireable<NonNullable<string | number>>;
        p: PropTypes.Requireable<NonNullable<string | number>>;
        pb: PropTypes.Requireable<NonNullable<string | number>>;
        pt: PropTypes.Requireable<NonNullable<string | number>>;
        pr: PropTypes.Requireable<NonNullable<string | number>>;
        pl: PropTypes.Requireable<NonNullable<string | number>>;
        px: PropTypes.Requireable<NonNullable<string | number>>;
        py: PropTypes.Requireable<NonNullable<string | number>>;
        h: PropTypes.Requireable<NonNullable<string | number>>;
        w: PropTypes.Requireable<NonNullable<string | number>>;
        flex: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        wrap: PropTypes.Requireable<boolean>;
        reverse: PropTypes.Requireable<boolean>;
        column: PropTypes.Requireable<boolean>;
        align: PropTypes.Requireable<string>;
        alignContent: PropTypes.Requireable<string>;
        alignSelf: PropTypes.Requireable<string>;
        justify: PropTypes.Requireable<string>;
        order: PropTypes.Requireable<number>;
        shrink: PropTypes.Requireable<NonNullable<number | boolean>>;
        grow: PropTypes.Requireable<NonNullable<number | boolean>>;
        basis: PropTypes.Requireable<number>;
        auto: PropTypes.Requireable<boolean>;
        hcenter: PropTypes.Requireable<boolean>;
        vcenter: PropTypes.Requireable<boolean>;
        center: PropTypes.Requireable<boolean>;
        as: PropTypes.Requireable<string>;
    };
};
declare const VBox: {
    ({ as, children, ...rest }: ComponentProps): React.DOMElement<never, Element>;
    displayName: string;
    propTypes: {
        m: PropTypes.Requireable<NonNullable<string | number>>;
        mb: PropTypes.Requireable<NonNullable<string | number>>;
        mt: PropTypes.Requireable<NonNullable<string | number>>;
        mr: PropTypes.Requireable<NonNullable<string | number>>;
        ml: PropTypes.Requireable<NonNullable<string | number>>;
        mx: PropTypes.Requireable<NonNullable<string | number>>;
        my: PropTypes.Requireable<NonNullable<string | number>>;
        p: PropTypes.Requireable<NonNullable<string | number>>;
        pb: PropTypes.Requireable<NonNullable<string | number>>;
        pt: PropTypes.Requireable<NonNullable<string | number>>;
        pr: PropTypes.Requireable<NonNullable<string | number>>;
        pl: PropTypes.Requireable<NonNullable<string | number>>;
        px: PropTypes.Requireable<NonNullable<string | number>>;
        py: PropTypes.Requireable<NonNullable<string | number>>;
        h: PropTypes.Requireable<NonNullable<string | number>>;
        w: PropTypes.Requireable<NonNullable<string | number>>;
        flex: PropTypes.Requireable<boolean>;
        inline: PropTypes.Requireable<boolean>;
        wrap: PropTypes.Requireable<boolean>;
        reverse: PropTypes.Requireable<boolean>;
        column: PropTypes.Requireable<boolean>;
        align: PropTypes.Requireable<string>;
        alignContent: PropTypes.Requireable<string>;
        alignSelf: PropTypes.Requireable<string>;
        justify: PropTypes.Requireable<string>;
        order: PropTypes.Requireable<number>;
        shrink: PropTypes.Requireable<NonNullable<number | boolean>>;
        grow: PropTypes.Requireable<NonNullable<number | boolean>>;
        basis: PropTypes.Requireable<number>;
        auto: PropTypes.Requireable<boolean>;
        hcenter: PropTypes.Requireable<boolean>;
        vcenter: PropTypes.Requireable<boolean>;
        center: PropTypes.Requireable<boolean>;
        as: PropTypes.Requireable<string>;
    };
};
export { getPropsWithLayout, propTypes, Layout, LayoutContext, Box, Flex, HBox, VBox };
